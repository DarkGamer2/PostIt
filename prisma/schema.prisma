// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model User {
  id        String    @id @default(uuid()) @map("_id")
  fullName  String
  username  String    @unique
  email     String    @unique
  password  String
  dob       String
  phoneNumber String?
  createdAt DateTime  @default(now())
  posts     Post[]
  followers Int       @default(0)
  following Int       @default(0)
  followedBy Follow[] @relation("following")
  followingUsers Follow[] @relation("follower")
  comments  Comment[] @relation("author") // <-- Relation name matches below
  likedPosts LikedPost[]
  verified  Boolean
}

model Post {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   String
  createdAt DateTime @default(now())
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  comments  Comment[]
  likes     Int      @default(0)
  shares    Int      @default(0)
  likedBy   LikedPost[]
  media     String[]
}

model Follow {
  id          String   @id @default(uuid()) @map("_id")
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User?    @relation("author", fields: [authorId], references: [id]) // <-- Add relation name here
  authorId  String?
}

model LikedPost {
  id      String @id @default(uuid()) @map("_id")
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String

  @@unique([userId, postId])
}